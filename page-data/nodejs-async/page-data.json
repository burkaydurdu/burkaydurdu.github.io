{"componentChunkName":"component---src-templates-blog-post-js","path":"/nodejs-async/","result":{"data":{"site":{"siteMetadata":{"title":"Burkay Durdu Blog","author":"Burkay Durdu"}},"markdownRemark":{"id":"b02746c2-50f5-54a5-afef-b4af153967c4","excerpt":"Blocking and Non-Blocking with Node.JS Blocking methods execute synchronously and non-blocking methods execute asynchronously. Example: Single Thread Javascript…","html":"<h3>Blocking and Non-Blocking with Node.JS</h3>\n<ul>\n<li>\n<p><strong>Blocking</strong> methods execute synchronously and <strong>non-blocking</strong> methods execute asynchronously.</p>\n<ul>\n<li>Example:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token comment\">// This is a synchronous file read.</span>\n <span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/file.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// blocks here until file is read</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token comment\">// This is a asynchronous</span>\n <span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/file.md'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/file.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// blocks here until file is read</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">moreWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// will run after console.log</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/file.md'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">moreWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// will run before console.log</span></code></pre></div>\n</li>\n</ul>\n<h3>Single Thread</h3>\n<ul>\n<li>Javascript execution in Node.js is single threaded, so concurrency refers to the event loop’s capacity to execute JavaScript callback functions after completing other work.</li>\n<li>JavaScript is an interpreted language, not a compiled one.</li>\n<li>There are several types of interpreters (known as engines). The most popular browser engines are V8 (Chrome), Quantum (Firefox) and WebKit (Safari).</li>\n<li>A single-thread language is one with a single call stack and a single memory heap. It means that it runs only one thing at a time.</li>\n<li>A <code class=\"language-text\">stack</code> is a continuous region of memory, allocating local context for each executed function.</li>\n<li>A <code class=\"language-text\">heap</code> is a much larger region, storing everything allocated dynamically.</li>\n</ul>\n<p><img src=\"/0bc34eeeb758c7fc7d0299731b2da116/stack.gif\"></p>\n<ul>\n<li>As you can see, the functions are added to the stack, executed and later deleted. It’s the so-called LIFO way - Last In, First Out. Each entry in the call stack is called a <code class=\"language-text\">stack frame</code>.</li>\n<li>\n<p>However, JS can also be non-blocking and behave as if it were multi-threaded. It means that it doesn’t wait for the response of an API call, I/O events, etc., and can continue the code execution. It is possible thanks to the JS engines which use (under the hood) real multi-threading languages, like C++ (Chrome) or Rust (Firefox). They provide us with the Web API under the browser hoods or ex. I/O API under Node.js.</p>\n<p><img src=\"/7acbc9fd44aaf885ddb4e3488cc26488/callback-queue.gif\"></p>\n</li>\n</ul>\n<h3>Note</h3>\n<ul>\n<li>You can try <code class=\"language-text\">call-stack</code> structure. <a href=\"http://latentflip.com/loupe\">Loupe</a></li>\n</ul>\n<h3>Thank you</h3>\n<blockquote>\n<p><a href=\"https://thecodest.co/blog/asynchronous-and-single-threaded-javascript-meet-the-event-loop\">thecodes.com</a></p>\n</blockquote>","frontmatter":{"title":"Node-JS Asynchronous and Single-threaded [NOTE]","date":"March 27, 2022"}}},"pageContext":{"slug":"/nodejs-async/","previous":{"fields":{"slug":"/clojure/"},"frontmatter":{"title":"Clojure"}},"next":{"fields":{"slug":"/goroutine-goscheduler/"},"frontmatter":{"title":"Goroutine & Go Scheduler"}}}},"staticQueryHashes":["3128451518","3584141052"]}