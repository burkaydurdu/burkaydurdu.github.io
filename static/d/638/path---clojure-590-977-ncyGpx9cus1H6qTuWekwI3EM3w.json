{"data":{"site":{"siteMetadata":{"title":"Burkay Durdu Blog","author":"Burkay Durdu"}},"markdownRemark":{"id":"727832d6-efc9-5492-a58d-f002b71ac8cb","excerpt":"Clojure nedir? Clojure ,  Lisp  diyalekti olup fonksiyonel bir programlama dilidir.  JVM  ( JAVA Virtual Machine ) tabanlı uygulamalar geliştirebilir ayrıca…","html":"<h1>Clojure nedir?</h1>\n<p><strong>Clojure</strong>, <strong>Lisp</strong> diyalekti olup fonksiyonel bir programlama dilidir. <strong>JVM</strong> (<em>JAVA Virtual Machine</em>) tabanlı uygulamalar geliştirebilir ayrıca <strong>Clojure-Script</strong> ile <strong>Web</strong> tabanlı uygulamalar oluşturabilirsiniz. Clojure’un güzel özelliklerinde biri de JVM tabanlı olduğu için <strong>JAVA</strong> kütüphanelerine erişim imkânı sağlıyor. Bu sayede zengin bir geliştirme havuzu karşılıyor bizleri.</p>\n<img src=\"/clojure_logo.png\" style=\"zoom:25%;\" />\n<h3>Neden fonksiyonel programlama?</h3>\n<p>Nesne yönelimli programlama dilleri (<em>JAVA</em>) anlaşılması kolay ve uygulanabilir olarak görünüyor. OOP gerçek dünyayı sanal dünya ile ilişkilendirip anlaşılması kolay bir yapı sunuyor bizlere fakat gerçekten de anlaşılması kolay bir yapımı sunuyor yoksa daha fazla karmaşık bir halemi getiriyor. Fonksiyonel programlamanın temelinde yatan şey de her şeyin temeli olan <em>Matematik</em>‘le ifade edilebilir. Bir programın girdileri ve çıktıları olur aynı matematikteki fonksiyonlar gibi.</p>\n<img src=\"fn.png\" style=\"zoom:33%;\" />\n<p>Yukarıda görmüş olduğumuz ifade hepimizin bir şekilde karşılaştığı bir görseldir. Görselde ki ifadeyi clojure ile yazalım.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> <span class=\"token number\">f</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">*</span> <span class=\"token number\">2</span> x<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Fonksiyonu <em>clojure</em> ile yazdık ve gördük ki ne kadar da kolaymış aslında. Fonksiyonel bir programlama dilinde geliştirilen code en küçük fonksiyonlardan en büyük fonksiyonlara doğrudur. Betimlemek istersek, <em>obeb</em> alan bir fonksiyon yazarız ve bunu daha büyük bir fonksiyonda kullanırız.</p>\n<p>Clojure dilinin getirileri arasında benim en çok sevdiğim ve hayatımı kolaylaştıran bir özelliği de veri manipülasyonunun çok kolay ve anlaşılır bir ifadeyle ortaya koymasıdır. Basit bir örnek vermek gerekirse. Bir dizi içerisinde çift sayıları filtreleyelim.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">filter</span> even? <span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">; => (2 4 6)</span></code></pre></div>\n<p>Neden fonksiyonel programlama dediğimizde örnekleri bu şekilde çoğaltabiliriz.</p>\n<h3>Clojure’a giriş</h3>\n<p><strong>Sayısal Türler</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token number\">42</span>        <span class=\"token comment\">; integer</span>\n-<span class=\"token number\">1</span>.<span class=\"token number\">5</span>      <span class=\"token comment\">; floating point</span>\n<span class=\"token number\">22</span>/<span class=\"token number\">7</span>      <span class=\"token comment\">; ratio</span></code></pre></div>\n<p><strong>Karakter Türleri</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token string\">\"hello\"</span>   <span class=\"token comment\">; string</span>\n\\<span class=\"token number\">e</span>        <span class=\"token comment\">; character</span>\n#<span class=\"token string\">\"[0-9]+\"</span> <span class=\"token comment\">; regular expression</span></code></pre></div>\n<p><strong>Koleksiyon Türleri</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\">'<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">; list</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>      <span class=\"token comment\">; vector</span>\n#<span class=\"token punctuation\">{</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>     <span class=\"token comment\">; set</span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">:a</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">:b</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">; map</span></code></pre></div>\n<h3>Clojure ifade değerlendirmesi</h3>\n<p><img src=\"/clojure_evaluation.png\"></p>\n<p>Clojure kaynak code okuyucu (Reader) tarafından okunur. Okuyucu, kaynağı (<em>.clj</em>) uzantılı dosyalardan okuyabilir. Okuyucu clojure verilerini üretir. Clojure derleyicisi <em>JVM</em> için byte code üretir.</p>\n<p>Basit bir şekilde clojure nedir? Neden fonksiyonel programlama? ve clojure küçük bir giriş yaptık. Bundan sonraki yazılarda clojure ile API, Web, mobil ve masaüstü programlar nasıl geliştirilir bunları paylaşacağım.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> bye <span class=\"token punctuation\">[</span>your-name<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">str</span> <span class=\"token string\">\"Hoşçakal \"</span> your-name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Clojure","date":"April 03, 2021"}}},"pageContext":{"slug":"/clojure/","previous":{"fields":{"slug":"/retrofit/"},"frontmatter":{"title":"Retrofit"}},"next":null}}